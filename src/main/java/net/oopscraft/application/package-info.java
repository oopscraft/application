
/**
 * This package contains classes that let you compile Java source code in tests and make assertions
 * about the results. This lets you easily test {@linkplain javax.annotation.processing.Processor
 * annotation processors} without forking {@code javac} or creating separate integration test
 * projects.
 *
 * <ul>
 * <li>{@link Compiler} lets you choose command-line options, annotation processors, and source
 *     files to compile.
 * <li>{@link Compilation} represents the immutable result of compiling source files: diagnostics
 *     and generated files.
 * <li>{@link CompilationSubject} lets you make assertions about {@link Compilation} objects.
 * <li>{@link JavaFileObjectSubject} lets you make assertions about {@link
 *     javax.tools.JavaFileObject} objects.
 * </ul>
 *
 * <p>A simple example that tests that compiling a source file succeeded is:
 *
 * <pre>
 * Compilation compilation =
 *     javac().compile(JavaFileObjects.forSourceString("HelloWorld", "final class HelloWorld {}");
 * assertThat(compilation).succeeded();
 * </pre>
 *
 * <p>A similar example that tests that compiling a source file with an annotation processor
 * succeeded without errors or warnings (including compiling any source files generated by the
 * annotation processor) is:
 *
 * <pre>
 * Compilation compilation =
 *     javac()
 *         .withProcessors(new MyAnnotationProcessor())
 *         .compile(JavaFileObjects.forSourceString("HelloWorld", "final class HelloWorld {}");
 * assertThat(compilation).succeededWithoutWarnings();
 * </pre>
 *
 * <p>You can make assertions about the files generated during the compilation as well. For example,
 * the following snippet tests that compiling a source file with an annotation processor generates a
 * source file equivalent to a golden file:
 *
 * <pre>
 * Compilation compilation =
 *     javac()
 *         .withProcessors(new MyAnnotationProcessor())
 *         .compile(JavaFileObjects.forResource("HelloWorld.java"));
 * assertThat(compilation).succeeded();
 * assertThat(compilation)
 *     .generatedSourceFile("GeneratedHelloWorld")
 *     .hasSourceEquivalentTo(JavaFileObjects.forResource("GeneratedHelloWorld.java"));
 * </pre>
 *
 * <p>You can also test that errors or other diagnostics were reported. The following tests that
 * compiling a source file with an annotation processor reported an error:
 *
 * <pre>
 * JavaFileObject helloWorld = JavaFileObjects.forResource("HelloWorld.java");
 * Compilation compilation =
 *     javac()
 *         .withProcessors(new NoHelloWorld())
 *         .compile(helloWorld);
 * assertThat(compilation).failed();
 * assertThat(compilation)
 *     .hadErrorContaining("No types named HelloWorld!")
 *     .inFile(helloWorld)
 *     .onLine(23)
 *     .atColumn(5);
 * </pre>
 * 
 * # You can also test that 11111111111111111
 * 
 * | FDSAFDSAF | FDSAFDSAFDSA |
 * | --------- | ------------ |
 * | column 1  | value 1 	  |
 * | column 2  | value 2      |
 * 
 *  example.png
 * Alice -> Bob: Authentication Request
 * Bob --> Alice: Authentication Response
 * 
 * 
 * ```java
 * JavaFileObject helloWorld = JavaFileObjects.forResource("HelloWorld.java");
 * Compilation compilation =
 *     javac()
 *         .withProcessors(new NoHelloWorld())
 *         .compile(helloWorld);
 * assertThat(compilation).failed();
 * assertThat(compilation)
 *     .hadErrorContaining("No types named HelloWorld!")
 *     .inFile(helloWorld)
 *     .onLine(23)
 *     .atColumn(5);
 * 
 * ```
 * # TITLE 222222
 * 
 * FDSAFDSAFDSA
 */
package net.oopscraft.application;
